reading in objects

sphere struct
plane struct
or object struct

sphere:
float xpos
float ypos
float color (probably not a pointer)


object.properties:


#define SPHERE 2
#define CAMERA 2

enum {
camera,
sphere
};


typedef struct object{

	// 0 = not an object
	// 1 = camera
	// 2 sphere
	// 3 plane
	int kind;


	union.properties{
	struct{
	float position
	float radius
	}
	struct{
	float normal
	distance
	whatever
	}

	float color


}object


Object objects[128];





for ( int i = 0; i< 128; i++ )
{
	Object *current = &objects[i];
	// REDEFINING POLYMORPHISM
	if (current->kind == SPHERE ) 
	{
	radius = current->radius;
	do some
	}
	if (current->kind == NONE)
	{
	continue;
	}
}



object *objects;

objects = malloc(1);

objects = realloc(objects, 2);

objects = realloc(objects, 3);
free(objects)


// double each time you realloc (pro mode) 




fscanf for each keyword, 

fscanf(fh, "%s", &str)

if (strcmp(str, "color:") == 1) {
	fscanf([%f, %f, %f]" &r, &g, &b);


if (strcmp(

}




for all x

	for all y


		// construct ray 


		what is nearest intersection t



		for all objects
			
			if sphere (polymorphism)

			use whatever small of two t values unless negative
			t0=  interest
			t1 = interest with sphere 2

			// two objects
			t = intersection test

			keep track of nearest t, 
			get color of nearest object
